makeCacheMatrix <- function(mtx = matrix()) {
inverse <- NULL
set <- function(x) {
mtx <<- x;
inverse <<- NULL;
}
get <- function() return(mtx);
setinv <- function(inv) inverse <<- inv;
getinv <- function() return(inverse);
return(list(set = set, get = get, setinv = setinv, getinv = getinv))
}
## This function computes the inverse of the special
## "matrix" returned by `makeCacheMatrix` above. If the inverse has
## already been calculated (and the matrix has not changed), then
## `cacheSolve` should retrieve the inverse from the cache.
cacheSolve <- function(mtx, ...) {
inverse <- mtx$getinv()
if(!is.null(inverse)) {
message("Getting cached data...")
return(inverse)
}
data <- mtx$get()
invserse <- solve(data, ...)
mtx$setinv(inverse)
return(inverse)
}
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(mtx = matrix()) {
inverse <- NULL
set <- function(x) {
mtx <<- x;
inverse <<- NULL;
}
get <- function() return(mtx);
setinv <- function(inv) inverse <<- inv;
getinv <- function() return(inverse);
return(list(set = set, get = get, setinv = setinv, getinv = getinv))
}
## Write a short comment describing this function
cacheSolve <- function(mtx, ...) {
inverse <- mtx$getinv()
if(!is.null(inverse)) {
message("Getting cached data...")
return(inverse)
}
data <- mtx$get()
invserse <- solve(data, ...)
mtx$setinv(inverse)
return(inverse)
}
rand.mtx <- function(n, rng = 1:10) {
matrix(sample(rng, n^2, replace=TRUE), c(n, n))
}
rand.mtx <- function(n, rng = 0:1000) {
matrix(sample(rng, n^2, replace=TRUE), c(n, n))
}
cachesolve()
rand.mtx(10)
cachesolve(rand.mtx(10))
cacheSolve(rand.mtx(10))
rand.x <- function(n, rng = 0:1000) {
matrix(sample(rng, n^2, replace=TRUE), c(n, n))
}
rand.x(8)
cacheSolve(rand.x(3))
cachesolve(1:1000, col=5, row=5)
cacheSolve(1:1000, col=5, row=5)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(mtx = matrix()) {
inverse <- NULL
set <- function(x) {
mtx <<- x;
inverse <<- NULL;
}
get <- function() return(mtx);
setinv <- function(inv) inverse <<- inv;
getinv <- function() return(inverse);
return(list(set = set, get = get, setinv = setinv, getinv = getinv))
}
## Write a short comment describing this function
cacheSolve <- function(mtx, ...) {
inverse <- mtx$getinv()
if(!is.null(inverse)) {
message("Getting cached data...")
return(inverse)
}
data <- mtx$get()
invserse <- solve(data, ...)
mtx$setinv(inverse)
return(inverse)
}
rand.x <- function(n, rng = 0:1000) {
matrix(sample(rng, n^2, replace=TRUE), c(n, n))
}
cacheSolve()
cacheSolve(2)
cacheSolve(c(2,3,4,4,2,1,0))
cacheSolve(rand.x(3))
## Put comments here that give an overall description of what your
## Write a short comment describing this function
## Create a "special" matrix
y <- matrix(sample(10,100,T),10)
makeCacheMatrix <- function(mtx = matrix()) {
inverse <- NULL
set <- function(x) {
mtx <<- x;
inverse <<- NULL;
}
get <- function() return(mtx);
setinv <- function(inv) inverse <<- inv;
getinv <- function() return(inverse);
return(list(set = set, get = get, setinv = setinv, getinv = getinv))
}
## Write a short comment describing this function
## Caching the inverse of "special" matrix
cacheSolve <- function(mtx, ...) {
inverse <- mtx$getinv()
if(!is.null(inverse)) {
message("Getting cached data...")
return(inverse)
}
data <- mtx$get()
invserse <- solve(data, ...)
mtx$setinv(inverse)
return(inverse)
}
fc1 <- makeCacheMatrix
fc2 <- cacheSolve
fc1(y)
fc2(y)
## Put comments here that give an overall description of what your
## Put comments here that give an overall description of what your
## Write a short comment describing this function
## Create a "special" matrix
y <- matrix(sample(10,100,T),10)
makeCacheMatrix <- function(mtx = matrix()) {
inverse <- NULL
set <- function(x) {
mtx <<- x;
inverse <<- NULL;
}
get <- function() return(mtx);
setinv <- function(inv) inverse <<- inv;
getinv <- function() return(inverse);
return(list(set = set, get = get, setinv = setinv, getinv = getinv))
}
## Write a short comment describing this function
## Caching the inverse of "special" matrix
cacheSolve <- function(mtx, ...) {
inverse <- mtx$getinv()
if(!is.null(inverse)) {
message("Getting cached data...")
return(inverse)
}
data <- mtx$get()
invserse <- solve(data, ...)
mtx$setinv(inverse)
return(inverse)
}
fc1 <- makeCacheMatrix
fc2 <- cacheSolve
fc1(y)
fc2(y)
## Put comments here that give an overall description of what your
## Write a short comment describing this function
## Create a "special" matrix
y <- matrix(sample(10,100,T),10)
makeCacheMatrix <- function(mtx = matrix()) {
inverse <- NULL
set <- function(x) {
mtx <<- x;
inverse <<- NULL;
}
get <- function() return(mtx);
setinv <- function(inv) inverse <<- inv;
getinv <- function() return(inverse);
return(list(set = set, get = get, setinv = setinv, getinv = getinv))
}
## Write a short comment describing this function
## Caching the inverse of "special" matrix
cacheSolve <- function(mtx, ...) {
inverse <- mtx$getinv()
if(!is.null(inverse)) {
message("Getting cached data...")
return(inverse)
}
data <- mtx$get()
invserse <- solve(data, ...)
mtx$setinv(inverse)
return(inverse)
}
fc1 <- makeCacheMatrix
fc2 <- cacheSolve
fc1(y)
fc2(y)
save.image("~/GitHub/ProgrammingAssignment2/Environment.RData")
setwd("~/GitHub/ProgrammingAssignment2")
